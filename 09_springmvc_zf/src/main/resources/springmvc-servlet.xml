<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.lanqiao.controller"/>

    <!--支持spring3.0+ 新的mvc注解,不加有些注解功能不行，如json转换的@ResponseBody
         <context:annotation-config/>
          将隐式地向 Spring 容器注册
        1. AutowiredAnnotationBeanPostProcessor     解决数据或组件自动装配
        2. CommonAnnotationBeanPostProcessor        解决兼容JSR250规范的注解：@Resource,@PostConstruct,...
        3. PersistenceAnnotationBeanPostProcessor   解决持久化注解处理
        4. RequiredAnnotationBeanPostProcessor
            这 4 个 BeanPostProcessor。

     enable-matrix-variables="true": 开启矩阵变量获取数据的特性
-->
    <mvc:annotation-driven enable-matrix-variables="true">
        <mvc:async-support default-timeout="10"/><!--子元素可指定异步拦截器-->
    </mvc:annotation-driven>

    <!-- 配置*.js,*.css,*.jpg,*.html等的请不由DispatcherServlet处理，而直接交tomcat服务的默认Servlet来处理，
        不同的服务器其默认Servlet的名字是不同，但tomcat默认Servlet的名字叫“default”
    -->
    <mvc:default-servlet-handler/>

    <!--对模型视图名称的解析，即在模型视图名称添加前后缀
        UserController.login(){
            return "success"; //spring mvc 解析为一个对应的jsp（视图）/views/success.jsp
        }
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/pages/" p:suffix=".jsp">
        <!-- 与p:prefix, p:suffix 等价
        <property name="prefix" value="/views/" />
        <property name="suffix" value=".jsp" />
        -->
        <!-- 如果使用jstl的话，配置下面的属性 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    </bean>

    <!-- 文件上传和下载 请求解析器，
        它会自动解析<form  enctype="multipart/form-data"> </form> 这种表单提交的请求
    -->
    <!--<bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        &lt;!&ndash; 文件上传时申请的内存大小 &ndash;&gt;
        <property name="maxInMemorySize" value="10240"/>
        &lt;!&ndash; 文件上传时的临时目录有作数据缓存 &ndash;&gt;
        <property name="uploadTempDir" value="/upload"/>
        &lt;!&ndash; 限制上传文件的大小 10M(10*1024*1024)&ndash;&gt;
        <property name="maxUploadSize" value="-1"/>
    </bean>-->

</beans>